upstream jf {
    server #BACKEND:#PORT;
    keepalive 32;
}
server {
    listen 80;
    server_name #IP;
    root /var/www/html;

    location = /robots.txt {
        add_header Content-Type text/plain;
        return 200 "User-agent: *\nDisallow: /\n";
    }
    location / {
        return 301 https://#IP$request_uri;
    }
}
server {
    #HTTP SITES
    listen 443 ssl;
    server_name #IP;
    ssl_certificate /etc/nginx/ssl/fullcert.pem;
    ssl_certificate_key /etc/nginx/ssl/#IP.key;
    ssl_session_timeout 5m;
    ssl_prefer_server_ciphers on;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers
    "ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4";
    ssl_buffer_size 8k;
    resolver 8.8.4.4 8.8.8.8 valid=300s;

    location = /robots.txt {
        add_header Content-Type text/plain;
        return 200 "User-agent: *\nDisallow: /\n";
    }

    #Reverse Proxy
    location / {
        add_header 'Referrer-Policy' 'origin';
        proxy_pass https://jf;
        proxy_set_header Host $host;
        proxy_set_header Access-Control-Allow-Origin *;
        proxy_set_header X-Host #IP;
        proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
        proxy_set_header CF-Connecting-IP $http_CF_Connecting_IP;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-Host $http_cf_connecting_ip;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Referer "https://#IP";
    }
    include /etc/nginx/snippets/bots.conf;
}
